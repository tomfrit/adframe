#!/usr/bin/perl -w
$VERSION=20110322;
use CGI::Carp qw(fatalsToBrowser);
use de::adframe::core::RequestParser;
use de::adframe::core::Main;

require 'ADFRAMECONF.pl';
%in			= ();
$TIMESTAMP_INDEX	= 9;
my $req 	= new RequestParser();

$adframe		= new Main($req);
my $doc			= $ENV{PATH_INFO} || $in{doc};
my $generated 	= 0;

$adframe->initSession($in{id}) if ($ENV{ADFRAME_USE_SESSIONS});

if ($doc eq '/cgi-bin/adframe') {
	$doc = $in{doc};
}

if (($doc eq '') || ($doc eq '/')) {
	login();
}
else {
	newDoc($doc);
}

sub newDoc {
	my $doc 	= shift;
	   $doc 	=~ s/^\///;
	   $doc 	=~ s/\.*?$//;
	   $doc	=~ s/(.*?)\.(.*)\s*$/$1/;
	if ($doc 	=~ /\/$/) {
		$doc = $doc.'index';
	}
	my $doctype	= $2;
	if ($doctype eq '') {
	   $doctype = $ENV{ADFRAME_DEFAULT_DOCTYPE} || 'html';
	}
	my $genpath		= "$ENV{ADFRAME_CGI_PATH}/ADFRAMEGEN";
	my $modpath		= "$ENV{ADFRAME_CGI_PATH}/ADFRAMEMODULES";
	my $docfile		= "$ENV{ADFRAME_DOC_PATH}/$doc".'.'.$doctype;
	my $genfile		= "$genpath/$doc".'.'.$doctype;
	my $modfile		= "$modpath/$doc".'.adf';
	my $genmodfile	= "$genpath/$doc".'.pm';
	my @docstat		= stat($docfile);
	my @genstat 	= stat($genfile);
	my @modstat 	= stat($modfile);
	my $generate 	= 0;
	my $generateXml = 0;
	my @snippets	= ();
	my @dynamicsnippets = ();
	my $package		= $doc;
	   $package =~ s/.*?\/([^\/]*?)$/$1/;
	$adframe->initnew();

	if ($docstat[$TIMESTAMP_INDEX] ne '') {   # EXISTIERT?

		if (($docstat[$TIMESTAMP_INDEX]>$genstat[$TIMESTAMP_INDEX]) || ($modstat[$TIMESTAMP_INDEX]>$genstat[$TIMESTAMP_INDEX])) {
			$generate=1;		# KEIN GEN VORHANDEN!
		}
		else {
			require  $genmodfile;
			@snippets = __AgSn();
			@dynamicsnippets = __AgDynSn();
			for (@snippets) {
				my @snpstat		= stat("$ENV{ADFRAME_DOC_PATH}/$_".'.snp');
				my @snpmodstat 	= stat("$modpath/$_".'.adf');
				if (($snpstat[$TIMESTAMP_INDEX]>$genstat[$TIMESTAMP_INDEX]) || ($snpmodstat[$TIMESTAMP_INDEX]>$genstat[$TIMESTAMP_INDEX])){
					$generate=1;
					$adframe->logger("timestamp $_ : snp:$snpstat[$TIMESTAMP_INDEX] snp-mod-timestamp: $snpmodstat[$TIMESTAMP_INDEX], doc timestamp:$genstat[$TIMESTAMP_INDEX]") if ($ENV{ADFRAME_ENABLE_SYSLOG});
				}
			}
			__Ac();  # SUB AUS GENERIERTEM - PM

			foreach my $k (@dynamicsnippets) {
				my $dsnd		= $adframe->{dict}->{$k}->{replace};
				my @dsnpstat		= stat($ENV{ADFRAME_DOC_PATH}.$adframe->{dict}->{$k}->{replace});
				my @dsnpgenstat 	= stat($genpath.$adframe->{dict}->{$k}->{replace});
				$dsnd=~ s/\.[^\/]*?$/\.adfd/g;
				my @dsnpmodstat 	= stat($modpath.$dsnd);

				if (($dsnpstat[$TIMESTAMP_INDEX]>$dsnpgenstat[$TIMESTAMP_INDEX]) || ($dsnpmodstat[$TIMESTAMP_INDEX]>$dsnpgenstat[$TIMESTAMP_INDEX])) {
					require de::adframe::core::DocumentGenerator;
					my $builddyn = new DocumentGenerator();
					if ($builddyn->generateDynamic($adframe->{dict}->{$k}->{replace},$k)) {
						$adframe->logger("timestamp $k :  dynamicsnp:$dsnpstat[$TIMESTAMP_INDEX] dynamicsnp-mod-timestamp: $dsnpmodstat[$TIMESTAMP_INDEX], doc timestamp:$genstat[$TIMESTAMP_INDEX]") if ($ENV{ADFRAME_ENABLE_SYSLOG});
					}
				}
			}
		}

		if (($generate) && (! $generated)) {
			require de::adframe::core::DocumentGenerator;
			my $build = new DocumentGenerator();
			if ($build->generate($doc,$doctype)) {
				$generated = 1;
				$adframe->logger("new generated: $doc");
				newDoc($doc.'.'.$doctype);
			}
			else {
				$adframe->error('Pool generation error for Document "'.$doc.'.'.$doctype.'"' );
				$adframe->logger("generation failed: $doc");
			}
		}
		else {
			if ($adframe->loadDoc($doc,$doctype)) {
				if ($ENV{ADFRAME_EVENT_ZONES} ne '') {
					foreach $zone (split(/,/,$ENV{ADFRAME_EVENT_ZONES})) {
						if ($doc =~ /^[\/]?$zone\//) {
							if (-e "./ADFRAMEZONES/$zone.adf") {
								require "./ADFRAMEZONES/$zone.adf";
								initAdframeZone();
								$adframe->setZone($zone);
							}
						}
					}
				}
				if ($generated) {
					require $genmodfile;		# FRISCH GENERIERT
					@snippets = __AgSn();
					@dynamicsnippets = __AgDynSn();
				}
				__Ac();
				if (-e $modfile) {
					require $modfile;
					common();
					dynSnp() if (*dynSnp{CODE});
				}
				for (@snippets) {
					if (-f "$modpath/$_".'.adf') {
						require "$modpath/$_".'.adf';
						common();
						dynSnp() if (*dynSnp{CODE});
					}
				}
				foreach my $k (@dynamicsnippets) {
					if ($adframe->_importDynamicGenSnippet($k)) {
						my $dsnd = $adframe->{dict}->{$k}->{replace};
						$dsnd=~ s/\.[^\/]*?$//;
						my $dsndgenmodfile	= "$genpath$dsnd".'.pmd';
						require  $dsndgenmodfile;
						__AcD();
						if (-f $modpath.$dsnd.'.adf') {
							require $modpath.$dsnd.'.adf';
							common();
						}
					}
				}
				$adframe->_modifyDoc();
				$adframe->storeSession() if ($ENV{ADFRAME_USE_SESSIONS});
				$adframe->sendDoc();
			}
			else {
				$adframe->error('The requested Document "'.$doc.'.'.$doctype.'" does not exist in pool' );
			}
		}
	}
	else {
		$adframe->error('The requested file "'.$doc.'.'.$doctype.'" does not exist !');
	}
	exit 0;
}
sub login {
	my $id = $adframe->getSessionId();
	my $query = '';
	$query = "$ENV{QUERY_STRING}" if ($ENV{QUERY_STRING} ne '');
	if ($ENV{ADFRAME_USE_SESSIONS}) {
		print "Location: http://$ENV{ADFRAME_SERVER_NAME}/cgi-bin/adframe/".$ENV{ADFRAME_START_PAGE}."?id=$id".$query."\n\n";
	}
	else {
		print "Location: http://$ENV{ADFRAME_SERVER_NAME}/cgi-bin/adframe/".$ENV{ADFRAME_START_PAGE}.'?'.$query."\n\n";
	}
	exit 0;
}
sub debug { $adframe->debug(@_); }
sub logger { $adframe->logger(@_); }